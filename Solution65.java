package com.usher.algorithm.offer;

/**
 * @Author: Usher
 * @Description:
 * a ^ b 表示没有考虑进位的情况下两数的和，(a & b) << 1 就是进位。
 *
 * 递归会终止的原因是 (a & b) << 1 最右边会多一个 0，那么继续递归，进位最右边的 0 会慢慢增多，最后进位会变为 0，递归终止。
 *
 * 三步走的方式计算二进制值相加： 5-101，7-111 第一步：相加各位的值，不算进位，得到010，二进制每位相加就相当于各位做异或操作，101^111。
 *
 * 第二步：计算进位值，得到1010，相当于各位做与操作得到101，再向左移一位得到1010，(101&111)<<1。
 *
 *
 * 第三步重复上述两步， 各位相加 010^1010=1000，进位值为100=(010&1010)<<1。
 *      继续重复上述两步：1000^100 = 1100，进位值为0，跳出循环，1100为最终结果
 *
 */
public class Solution65 {
    public int Add(int num1,int num2) {
        while (num2 != 0){
            int tmp = num1 ^ num2;
            num2 = (num1 & num2) << 1;
            num1 = tmp;
        }
        return num1;
    }
}
